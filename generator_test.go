package main

import (
	plugin_go "github.com/golang/protobuf/protoc-gen-go/plugin"
	"github.com/stretchr/testify/assert"
	"google.golang.org/protobuf/types/descriptorpb"
	"strings"
	"testing"
)

var syntax = "proto3"

func createCodeGeneratorRequest(file *descriptorpb.FileDescriptorProto) plugin_go.CodeGeneratorRequest {
	if file == nil {
		return plugin_go.CodeGeneratorRequest{
			ProtoFile: []*descriptorpb.FileDescriptorProto{
				{Syntax: &syntax},
			},
		}
	}
	return plugin_go.CodeGeneratorRequest{
		ProtoFile: []*descriptorpb.FileDescriptorProto{
			{Syntax: &syntax, EnumType: file.EnumType, MessageType: file.MessageType},
		},
	}
}

var fileHeader = `/* tslint:disable */

// This file has been generated by https://github.com/h2oai/protoc-gen-twirp_ts.
// Do not edit.`

func getContent(t *testing.T, res *plugin_go.CodeGeneratorResponse) string {
	fileContent := *res.File[1].Content
	if !strings.HasPrefix(fileContent, fileHeader) {
		t.Fatal("Generated file does not start with expected header")
	}
	return strings.TrimPrefix(fileContent, fileHeader)
}

func TestGenerate(t *testing.T) {
	foo := "Foo"
	bar := "bar"
	baz := "baz"
	tNumber := descriptorpb.FieldDescriptorProto_TYPE_DOUBLE
	tString := descriptorpb.FieldDescriptorProto_TYPE_SFIXED64
	tBool := descriptorpb.FieldDescriptorProto_TYPE_BOOL

	for _, tc := range []struct {
		name string
		req  plugin_go.CodeGeneratorRequest
		want string
	}{{
		name: "An empty input",
		req:  createCodeGeneratorRequest(nil),
		want: "",
	}, {
		name: "An enum",
		req: createCodeGeneratorRequest(&descriptorpb.FileDescriptorProto{
			EnumType: []*descriptorpb.EnumDescriptorProto{
				{Name: &foo, Value: []*descriptorpb.EnumValueDescriptorProto{{Name: &foo}}},
			}}),
		want: `
export enum Foo {
  Foo = 'Foo'
}`,
	}, {
		name: "A message",
		req: createCodeGeneratorRequest(&descriptorpb.FileDescriptorProto{
			MessageType: []*descriptorpb.DescriptorProto{
				{Name: &foo, Field: []*descriptorpb.FieldDescriptorProto{
					{Name: &foo, Type: &tNumber},
					{Name: &bar, Type: &tString},
					{Name: &baz, Type: &tBool}}},
			}}),
		want: `

export interface Foo {
  Foo: number;
  bar: string;
  baz: boolean;
}`,
	}} {
		t.Run(tc.name, func(t *testing.T) {
			ret, err := generate(&tc.req)
			if err != nil {
				t.Fatal("Error in generation", err)
			}
			fileContent := getContent(t, ret)

			assert.Equal(t, tc.want, fileContent)
		})
	}
}
